// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// generator class_validator {
//   provider = "prisma-class-validator-generator"
// }

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  userPhotoUrl String?
  fullName     String
  email        String  @unique
  password     String
  role         Role    @default(USER)
  isActive     Boolean @default(true)

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  tokens       UserToken[]
  organization Organization? @relation(fields: [orgId], references: [id])
  orgId        String?       @db.ObjectId
  reviews      Review[]
  bookings     Booking[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  ORGANIZATION_CREATOR
  TEAM_MEMBER
}

model UserToken {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken           String
  accessTokenExpiredAt  DateTime
  refreshToken          String
  refreshTokenExpiredAt DateTime

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("user_tokens")
}

model Organization {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  contactNo   String
  email       String
  photoUrl    String

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  teamMembers User[]
  events      Event[]
  bookings    Booking[]

  @@map("organizations")
}

model Event {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  city        String
  state       String
  country     String
  venue       String
  category    String
  // geoLatLng String

  photos  EventPhoto[]
  timings EventTiming[]
  prices  EventPrice[]

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.ObjectId
  reviews      Review[]
  bookings     Booking[]

  @@unique([photos.id])
  @@unique([timings.id])
  @@unique([prices.id])
  @@map("events")
}

type EventPhoto {
  id       String @default(uuid())
  photoUrl String
}

type EventTiming {
  id        String   @default(uuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
}

type EventPrice {
  id       String @default(uuid())
  price    Float
  currency String
  maxLimit Int    @default(0)
  sold     Int    @default(0)
}

model Review {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  star        Int

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId

  @@map("reviews")
}

model Booking {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  qty    Int
  status BookingStatus @default(ACTIVE)

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  event        Event        @relation(fields: [eventId], references: [id])
  eventId      String       @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.ObjectId

  priceId  String
  timingId String

  @@map("bookings")
}

enum BookingStatus {
  ACTIVE
  CANCELED
}
